<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * See LICENSE.md for license details.
 */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="DhlCarrierPaketPurchaseTest" extends="DhlCarrierPaketRateEmulationInCheckoutOneProductTest">
        <annotations>
            <features value="Checkout"/>
            <stories value="Purchase a single product using DHL Paket carrier"/>
            <title value="Purchase a single product using DHL Paket carrier"/>
            <description value="Purchase a single product using DHL Paket carrier and check if the street name was split and can be updated."/>
            <severity value="CRITICAL"/>
            <group value="carrier-paket-purchase"/>
        </annotations>

        <comment userInput="-> Perform actual test" stepKey="runTestComment"/>

        <actionGroup ref="OpenStoreFrontProductPageActionGroup" stepKey="openProductPage">
            <argument name="productUrlKey" value="$$createSimpleProduct.custom_attributes[url_key]$$"/>
        </actionGroup>

        <!-- Put our SimpleProduct into the cart -->
        <actionGroup ref="StorefrontAddProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$$createSimpleProduct$$"/>
            <argument name="productCount" value="1"/>
        </actionGroup>

        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="guestNavigateToCheckout"/>

        <actionGroup ref="GuestCheckoutFillingShippingSectionWithCountryActionGroup" stepKey="guestCheckoutFillingShippingSectionWithCountry">
            <argument name="customerVar" value="Customer_DE"/>
            <argument name="customerAddressVar" value="CustomerAddress_DE_with_Supplement"/>
            <argument name="shippingMethod" value="DHL Paket"/>
        </actionGroup>

        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="guestSelectCheckMoneyOrderPayment"/>
        <actionGroup ref="CheckoutPlaceOrderActionGroup" stepKey="guestPlaceorder">
            <argument name="orderNumberMessage" value="CONST.successGuestCheckoutOrderNumberMessage"/>
            <argument name="emailYouMessage" value="CONST.successCheckoutEmailYouMessage"/>
        </actionGroup>

        <grabTextFrom selector="{{StorefrontCheckoutSection.orderNumber}}" stepKey="grabOrderNumber"/>

        <!-- Order Details Page -->
        <amOnPage url="{{AdminOrderPage.url({$grabOrderNumber})}}" stepKey="navigateToAdminOrderDetailsPage"/>
        <waitForPageLoad stepKey="waitForAdminOrderDetailsPageLoad"/>
        <seeElement selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetContainer}}" stepKey="seeOrderRecipientStreetContainer"/>

        <!-- New Shipment Page -->
        <amOnPage url="{{AdminShipmentNewPage.url}}$grabOrderNumber" stepKey="navigateToAdminShipmentNewPage"/>
        <waitForPageLoad stepKey="waitForAdminShipmentDetailsPageLoad"/>
        <seeElement selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetContainer}}" stepKey="seeShipmentRecipientStreetContainer"/>

        <!-- Validate initial values -->
        <grabTextFrom selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetName}}" stepKey="initialStreetName"/>
        <assertEquals stepKey="assertStreetNameWasSplit">
            <actualResult type="variable">initialStreetName</actualResult>
            <expectedResult type="string">Nonnenstra√üe</expectedResult>
        </assertEquals>

        <grabTextFrom selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetSupplement}}" stepKey="initialSupplement"/>
        <assertEquals stepKey="assertSupplementWasSplit">
            <actualResult type="variable">initialSupplement</actualResult>
            <expectedResult type="string">2. Etage</expectedResult>
        </assertEquals>

        <seeElement selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetEditLink}}" stepKey="seeRecipientStreetEditLink"/>
        <click selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetEditLink}}" stepKey="clickLinkToRecipientStreetEdit"/>
        <waitForPageLoad stepKey="waitForAdminSalesOrderRecipientStreetEditPageLoad" time="60"/>

        <!-- Check inputs visibility -->
        <seeElement selector="{{AdminSalesOrderRecipientStreetEditFormSection.streetName}}" stepKey="seeStreetNameField"/>
        <seeElement selector="{{AdminSalesOrderRecipientStreetEditFormSection.streetNumber}}" stepKey="seeStreetNumberField"/>
        <seeElement selector="{{AdminSalesOrderRecipientStreetEditFormSection.supplement}}" stepKey="seeSupplementField"/>
        <!-- Fill new values -->
        <fillField selector="{{AdminSalesOrderRecipientStreetEditFormSection.streetName}}" userInput="{{Address_with_Supplement_Replace.street}}" stepKey="fillStreetName"/>
        <fillField selector="{{AdminSalesOrderRecipientStreetEditFormSection.streetNumber}}" userInput="{{Address_with_Supplement_Replace.streetNumber}}" stepKey="fillStreetNumber"/>
        <fillField selector="{{AdminSalesOrderRecipientStreetEditFormSection.supplement}}" userInput="{{Address_with_Supplement_Replace.streetSupplement}}" stepKey="fillStreetSupplement"/>

        <!-- Save -->
        <!-- fixme(nr): semantically wrong, we are not on a config page -->
        <actionGroup ref="AdminSystemConfigSectionSaveActionGroup" stepKey="saveAdminConfigSection"/>
        <waitForPageLoad stepKey="waitForAdminOrderDetailsPageLoad2"/>

        <!-- Back to order details page, validate changed values -->
        <grabTextFrom selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetName}}" stepKey="updatedStreetName"/>
        <assertEquals stepKey="assertStreetNameWasUpdated">
            <actualResult type="variable">updatedStreetName</actualResult>
            <expectedResult type="string">{{Address_with_Supplement_Replace.street}}</expectedResult>
        </assertEquals>

        <grabTextFrom selector="{{AdminOrderRecipientStreetInformationSection.recipientStreetSupplement}}" stepKey="updatedSupplement"/>
        <assertEquals stepKey="assertSupplementWasUpdated">
            <actualResult type="variable">updatedSupplement</actualResult>
            <expectedResult type="string">{{Address_with_Supplement_Replace.streetSupplement}}</expectedResult>
        </assertEquals>
    </test>
</tests>
